// PE Grammar for PE Grammars
//
// Adapted from [1] by Ian Piumarta <first-name at last-name point com>.
//
// Best viewed using 140 columns monospaced with tabs every 8.
//
// [1] Bryan Ford.  "Parsing Expression Grammars: A Recognition-Based Syntactic
//     Foundation."  Symposium on Principles of Programming Languages,
//     January 14--16, 2004, Venice, Italy.

// Hierarchical syntax
Grammar		= _{ Spacing ~ PackageName
			   ~ Import*
                           ~ "type" ~ MustSpacing ~ Identifier
                           ~ "Peg" ~ Spacing ~ Action
                           ~ Definition+ ~ EndOfFile }
PackageName     = ${ "package" ~ MustSpacing ~ Identifier }

Import		= ${ "import" ~ Spacing ~ (MultiImport | SingleImport) ~ Spacing }
SingleImport	= ${ ImportName }
MultiImport	= ${ "(" ~ Spacing ~ (ImportName ~ "\n" ~ Spacing)* ~ Spacing ~ ")"  }

ImportName	= ${ "\"" ~ ('0'..'9' | 'a'..'z' | 'A'..'Z' | "_" | "/" | "." | "\\" | "-")+ ~ "\"" }

Definition	= ${ Identifier
		     ~ LeftArrow ~ Expression ~ &(Identifier ~ LeftArrow | EOI) }
Expression	= ${ (Sequence ~ (Slash ~ Sequence)* ~ (TrailingSlash)? ) ? }

Sequence	= ${ Prefix+ }

Prefix		= _{ And ~ Action
		 | Not ~ Action
		 | And ~ Suffix	
		 | Not ~ Suffix	
		 |     Suffix }
Suffix          = _{ Primary ~ (Question | Star | Plus )? }
Primary	        = _{ Identifier ~ !LeftArrow
                 | Open ~ Expression ~ Close
                 | Literal
                 | Class
                 | Dot
                 | Action
                 | Begin ~ Expression ~ End }

// Lexical syntax

//PrivateIdentifier = ${ ('a'..'z' | "_") ~ IdentCont* ~ Spacing }
IdentifierName = @{ IdentStart ~ IdentCont* }
Identifier	= _{ IdentifierName ~ Spacing }
IdentStart	= @{ ('a'..'z' | 'A'..'Z' | "_") }
IdentCont	= @{ IdentStart | '0'..'9' }

SingleQLiteral = ${ (!"'" ~ Char)? ~ (!"'" ~ Char )* }
SingleQLiteralFull = _{ "'" ~ SingleQLiteral ~ "'" ~ Spacing }
DoubleQLiteral = ${ (!"\"" ~ DoubleChar)? ~ (!"\"" ~ DoubleChar )* }
DoubleQLiteralFull = _{ "\"" ~ DoubleQLiteral ~ "\"" ~ Spacing }

Literal		= _{ SingleQLiteralFull | DoubleQLiteralFull }
		 
Class		= ${ ( "[[" ~ ( "^" ~ DoubleRanges | DoubleRanges )? ~ "]]" | "[" ~ ( "^" ~ Ranges | Ranges )? ~ "]" ) ~ Spacing }
Ranges		= _{ !"]" ~ Range ~ (!"]" ~ Range )* }
DoubleRanges	= _{ !"]]" ~ DoubleRange ~ (!"]]" ~ DoubleRange)* }
Range		= ${ Char ~ "-" ~ Char | Char }
DoubleRange	= ${ Char ~ "-" ~ Char | DoubleChar }
Char            = ${ Escape | !"\\" ~ ANY }
DoubleChar	= ${ Escape
		 | ('a'..'z' | 'A'..'Z')
                 | !"\\" ~ ANY }
Escape          = ${ "\\a"                      // # bell
                 | "\\b"                      //  bs
                 | "\\e"                      //  esc
                 | "\\f"                      //  ff
                 | "\\n"                      //  nl
                 | "\\r"                      //  cr
                 | "\\t"                      //  ht
                 | "\\v"                      //  vt
                 | "\\'"		
                 | "\\\""		
                 | "\\["
                 | "\\]"
                 | "\\-"
                 | "\\" ~ "0x" ~ ASCII_HEX_DIGIT+
                 | "\\" ~ '0'..'3' ~ '0'..'7' ~ '0'..'7'
                 | "\\" ~ '0'..'7' ~ '0'..'7'?
                 | "\\\\"
                 }
LeftArrow	= ${ ("<-" | "\0x2190") ~ Spacing }
TrailingSlash	= ${ "/" ~ Spacing }
Slash		= ${ "/" ~ Spacing }
And		= ${ "&" ~ Spacing }
Not		= ${ "!" ~ Spacing }
Question	= ${ "?" ~ Spacing }
Star		= ${ "*" ~ Spacing }
Plus		= ${ "+" ~ Spacing }
Open		= ${ "(" ~ Spacing }
Close		= ${ ")" ~ Spacing }
Dot		= ${ "." ~ Spacing }
SpaceComment	= _{ (Space | Comment) }
Spacing		= _{ SpaceComment* }
MustSpacing	= _{ SpaceComment+ }
Comment		= _{ ("#" | "//") ~ (!EndOfLine ~ ANY)* ~ EndOfLine }
Space		= _{ " " | "\t" | EndOfLine }
EndOfLine	= _{ "\r\n" | "\n" | "\r" }
EndOfFile	= _{ EOI }
Action		= ${ "{" ~ ActionBody* ~ "}" ~ Spacing }
ActionBody	= @{ (!("{" | "}") ~ ANY) | "{" ~ ActionBody* ~ "}" }
Begin		= ${ "<" ~ Spacing }
End		= ${ ">" ~ Spacing }

